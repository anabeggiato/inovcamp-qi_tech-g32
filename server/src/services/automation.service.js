const { db } = require('../../db');
const { apiIntegration } = require('./apiIntegration.service');
const { eventService } = require('./eventService');

/**
 * Servi√ßo de Automa√ß√£o - Sistema baseado em eventos
 * Mais eficiente que polling por tempo
 */
class AutomationService {

    constructor() {
        this.isRunning = false;
        this.eventService = eventService;

        console.log('ü§ñ AutomationService inicializado (modo eventos)');
    }

    /**
     * Iniciar sistema de automa√ß√£o baseado em eventos
     */
    async startAllJobs() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Sistema de automa√ß√£o j√° est√° rodando');
            return;
        }

        console.log('üöÄ Iniciando sistema de automa√ß√£o baseado em eventos...');
        this.isRunning = true;

        // Iniciar o servi√ßo de eventos
        await this.eventService.startListening();

        console.log('‚úÖ Sistema de automa√ß√£o iniciado (modo eventos)');
        console.log('üéØ Eventos monitorados:');
        console.log('   üë§ user.created - Onboarding autom√°tico');
        console.log('   üí∞ loan.created - Matching autom√°tico');
        console.log('   üéØ offer.created - Matching autom√°tico');
        console.log('   üí≥ transaction.created - An√°lise de fraude');
        console.log('   üìö academic.updated - Score din√¢mico');
        console.log('   ‚è∞ installment.due - Cobran√ßa autom√°tica');
    }

    /**
     * Parar sistema de automa√ß√£o
     */
    stopAllJobs() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è Sistema de automa√ß√£o n√£o est√° rodando');
            return;
        }

        console.log('üõë Parando sistema de automa√ß√£o...');

        // Parar o servi√ßo de eventos
        this.eventService.stopListening();

        this.isRunning = false;

        console.log('‚úÖ Sistema de automa√ß√£o parado');
    }

    /**
     * Obter status do sistema de automa√ß√£o
     */
    getJobsStatus() {
        return {
            isRunning: this.isRunning,
            mode: 'events',
            eventService: this.eventService.getStatus(),
            timestamp: new Date().toISOString()
        };
    }

    // ===== M√âTODOS DE COMPATIBILIDADE =====

    /**
     * Processar onboarding de usu√°rio (m√©todo de compatibilidade)
     */
    async processUserOnboarding(user) {
        // Este m√©todo agora √© chamado pelo EventService
        console.log(`üë§ Onboarding processado via evento para usu√°rio ${user.id}`);
    }

    /**
     * Recalcular score de estudante (m√©todo de compatibilidade)
     */
    async recalculateStudentScore(user) {
        // Este m√©todo agora √© chamado pelo EventService
        console.log(`üìä Score recalculado via evento para usu√°rio ${user.id}`);
    }

    /**
     * Executar matching manual (m√©todo de compatibilidade)
     */
    async runMatchingJob() {
        console.log('ü§ù Matching manual executado (sistema baseado em eventos ativo)');
    }
}

// Singleton instance
const automationService = new AutomationService();

module.exports = {
    AutomationService,
    automationService
};